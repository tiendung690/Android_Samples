/*
 * Java OSC Sample
 * 2018-05-01 K.OHWADA
 */

// change log
// 2018-05-01 K.OHWADA
// add EventListener, and notify below
// (1) UDP Packet received
// (2) invalid character in OSM address
// (3) No matching OSCListener
// (4) cannot convert to OSM message from UDP Packet
// original : https://github.com/hoijui/JavaOSC 


/*
 * Copyright (C) 2004-2014, C. Ramakrishnan / Illposed Software.
 * All rights reserved.
 *
 * This code is licensed under the BSD 3-Clause license.
 * See file LICENSE (or LICENSE.html) for more information.
 */

package jp.ohwada.android.oscrecieversample2.util;

import android.util.Log;

import com.illposed.osc.AddressSelector;
import com.illposed.osc.OSCListener;
import com.illposed.osc.OSCPacket;
import com.illposed.osc.OSCPort;
import com.illposed.osc.utility.OSCByteArrayToJavaConverter;
import com.illposed.osc.utility.OSCPatternAddressSelector;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.nio.charset.Charset;

/**
 * OSCPortInCustom is the class that listens for OSC messages.
 *
 * An example:<br>
 * (loosely based on {com.illposed.osc.OSCPortTest#testReceiving()})
 * <blockquote><pre>{@code
 * receiver = new OSCPortInCustom(OSCPort.DEFAULT_SC_OSC_PORT());
 * OSCListener listener = new OSCListener() {
 * 	public void acceptMessage(java.util.Date time, OSCMessage message) {
 * 		System.out.println("Message received!");
 * 	}
 * };
 * receiver.addListener("/message/receiving", listener);
 * receiver.startListening();
 * }</pre></blockquote>
 *
 * Then, using a program such as SuperCollider or sendOSC, send a message
 * to this computer, port {@link #DEFAULT_SC_OSC_PORT},
 * with the address "/message/receiving".
 *
 * @author Chandrasekhar Ramakrishnan
 */
public class OSCPortInCustom extends OSCPort implements Runnable {


        // debug
	private final static boolean D = true;
    	private final static String TAG = "OSC";
    	private final static String TAG_SUB = "OSCPortInCustom";

	public static final int ERROR_NONE = 0;

	public static final int ERROR_INVALID_ADDR = 1;

	public static final int ERROR_NOT_CONVERT = 2;

	public static final int ERROR_UNMATCH = 3;

	/**
	 * Buffers were 1500 bytes in size, but were increased to 1536, as this is a common MTU,
	 * and then increased to 65507, as this is the maximum incoming datagram data size.
	 */
	static final int BUFFER_SIZE = 65507;

	/** state for listening */
	private boolean listening;
	private final OSCByteArrayToJavaConverter converter;
	private final OSCPacketDispatcherCustom dispatcher;
	private Thread listeningThread;

  // callback 
    private OnEventListener mListener;

/*
  * callback interface
 */    
    public interface OnEventListener {
		public void onRecieve(byte[] bytes);
		public void onError(int error);
		public void onException(Exception ex);
    } // interface


	/**
	 * Create an OSCPort that listens using a specified socket.
	 * @param socket DatagramSocket to listen on.
	 */
	public OSCPortInCustom(final DatagramSocket socket) {
		super(socket, socket.getLocalPort());

		this.converter = new OSCByteArrayToJavaConverter();

		this.dispatcher = new OSCPacketDispatcherCustom();
        // notifyErrror();

		this.listeningThread = null;
	} // OSCPortInCustom

	/**
	 * Create an OSCPort that listens on the specified port.
	 * Strings will be decoded using the systems default character set.
	 * @param port UDP port to listen on.
	 * @throws SocketException if the port number is invalid,
	 *   or there is already a socket listening on it
	 */
	public OSCPortInCustom(final int port) throws SocketException {
		this(new DatagramSocket(port));
	} // OSCPortInCustom

	/**
	 * Create an OSCPort that listens on the specified port,
	 * and decodes strings with a specific character set.
	 * @param port UDP port to listen on.
	 * @param charset how to decode strings read from incoming packages.
	 *   This includes message addresses and string parameters.
	 * @throws SocketException if the port number is invalid,
	 *   or there is already a socket listening on it
	 */
	public OSCPortInCustom(final int port, final Charset charset) throws SocketException {
		this(port);

		this.converter.setCharset(charset);
	} // OSCPortInCustom

/**
 *  setOnEventListener
 */
    public void setOnEventListener(OnEventListener listener ) {
        mListener = listener ;
    } // setOnEventListener

	/**
	 * Run the loop that listens for OSC on a socket until
	 * {@link #isListening()} becomes false.
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
        log_d("run");
		final byte[] buffer = new byte[BUFFER_SIZE];
		final DatagramPacket packet = new DatagramPacket(buffer, BUFFER_SIZE);
		final DatagramSocket socket = getSocket();
		while (listening) {
			try {
				try {
					socket.receive(packet);
				} catch (SocketException ex) {
// IllegalArgumentException
					if (listening) {
						// throw ex;
                        notifyException(ex);
					} else {
						// if we closed the socket while receiving data,
						// the exception is expected/normal, so we hide it
						continue;
					}
				}

			OSCPacket oscPacket = null;
             try{
				oscPacket = converter.convert(buffer,
						packet.getLength());
			} catch (java.lang.IllegalArgumentException ex) {
				//log_d( ex.getMessage() );
                notifyError(ERROR_INVALID_ADDR);
			} catch (Exception ex) {
				ex.printStackTrace();
                notifyException(ex);
            }

            notifyRecieve(buffer);

            if (oscPacket == null) {
                    notifyError(ERROR_NOT_CONVERT);
            } else {
			        boolean ret = dispatcher.dispatchPacket(oscPacket);
                    if (!ret ) {
                        notifyError(ERROR_UNMATCH);
                    }
            } //  if oscPacket

		}

	} // run

	/**
	 * Start listening for incoming OSCPackets
	 */
	public void startListening() {

		if (!isListening()) { // NOTE This is not thread-save
			listening = true;
			listeningThread = new Thread(this);
			// The JVM exits when the only threads running are all daemon threads.
			listeningThread.setDaemon(true);
			listeningThread.start();
		}
	}

	/**
	 * Stop listening for incoming OSCPackets
	 */
	public void stopListening() {

		listening = false;
		if (listeningThread != null) { // NOTE This is not thread-save
			listeningThread.interrupt();
		}
		listeningThread = null;
	}

	/**
	 * Am I listening for packets?
	 * @return true if this port is in listening mode
	 */
	public boolean isListening() {
		return listening;
	}

	/**
	 * Registers a listener that will be notified of incoming messages,
	 * if their address matches the given pattern.
	 *
	 * @param addressSelector either a fixed address like "/sc/mixer/volume",
	 *   or a selector pattern (a mix between wildcards and regex)
	 *   like "/??/mixer/*", see {@link OSCPatternAddressSelector} for details
	 * @param listener will be notified of incoming packets, if they match
	 */
	public void addListener(final String addressSelector, final OSCListener listener) {
		this.addListener(new OSCPatternAddressSelector(addressSelector), listener);
	}

	/**
	 * Registers a listener that will be notified of incoming messages,
	 * if their address matches the given selector.
	 * @param addressSelector a custom address selector
	 * @param listener will be notified of incoming packets, if they match
	 */
	public void addListener(final AddressSelector addressSelector, final OSCListener listener) {
		dispatcher.addListener(addressSelector, listener);
	}

 	/**
	 * notifyRecieve
	 */ 
private void notifyRecieve(byte[] buffer) {
    log_d("notifyRecieve");
    if (mListener != null ) {
        mListener.onRecieve(buffer);
    }
} // notifyRecieve

 	/**
	 * notifyError
	 */ 
private void notifyError(int error) {
    log_d("notifyError");
    if (mListener != null ) {
        mListener.onError(error);
    }
} // notifyError


 	/**
	 * notifyException
	 */ 
private void notifyException(Exception ex) {
    log_d("notifyException");
    if (mListener != null ) {
                    mListener.onException( ex );
                }
} // notifyException

 	/**
	 * write into logcat
	 */ 
	private static void log_d( String msg ) {
	    if (D) Log.d( TAG, TAG_SUB + " " + msg );
	} // log_d

} // class OSCPortInCustom

