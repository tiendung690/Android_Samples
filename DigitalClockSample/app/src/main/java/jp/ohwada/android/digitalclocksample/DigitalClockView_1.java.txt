/**
 * degital clock sample
 * 2017-07-01 K.OHWADA 
 */
 
package jp.ohwada.android.digitalclocksample;


import java.util.Calendar;

import android.content.Context;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.os.Handler;
import android.os.SystemClock;
import android.provider.Settings;
import android.text.format.DateFormat;
import android.util.AttributeSet;
import android.widget.TextView;

/**
 * Like AnalogClock, but digital.  Shows seconds.
 *
 * FIXME: implement separate views for hours/minutes/seconds, so
 * proportional fonts don't shake rendering
 */
 
 
 // =====
oid.googlesource.com/platform/frameworks/base/+/47fb191/core/java/android/widget/DigitalClock.java
// =====


/**
 * DigitalClockView
 */
public class DigitalClockView extends TextView {

   
    private SystemSettingsContentObserver.javaSettingsContentObserver mContentObserver;
    
     private ClockTimer  mClockTimer; 
    
    private DigitalClockText mDigitalClockText;

    // private boolean mTickerStopped = false;

    // String mFormat;
    
    
/**
 * constractor
 */
    public DigitalClockView(Context context) {
        super(context);
        initView(context);
    }


/**
 * constractor
 */
    public DigitalClockView(Context context, AttributeSet attrs) {
        super(context, attrs);
        initView(context);
    }


/**
 * initView
 */
    private void initView(Context context) {

    	//Resources r = mContext.getResources();
        Resources r = context.getResources();
        
  //      if (mCalendar == null) {
   //         mCalendar = Calendar.getInstance();
    //    }

            mContentObserver  = new SystemSettingsContentObserver.javaSettingsContentObserver( context );
         mContentObserver.setOnChangedListener(
            new SystemSettingsContentObserver.javaSettingsContentObserver.OnChangedListener() {
                        @Override
           public void  onChange( boolean selfChange ) {
				procSystemSettingsChange();
            }                     
          } ); // setOnChangedListener
          
          
        //mFormatChangeObserver = new FormatChangeObserver();
        // getContext().getContentResolver().registerContentObserver(
                //Settings.System.CONTENT_URI, true, 
                // mFormatChangeObserver);

        // setFormat();

            mClockTimer  = new ClockTimer( this );
         mClockTimer.setOnChangedListener(
            new ClockTimer.OnChangedListener() {
            @Override
            public void onChangeTimer() {
				updateText();
            }
            
          } );  // ClockTimer
        
     mDigitalClockText = new DigitalClockText( this );         
    
    
        
    }
    
    
/**
 * onAttachedToWindow
 */
    @Override
    protected void onAttachedToWindow() {
                super.onAttachedToWindow();
      mClockTimer.start();  
    } // onAttachedToWindow
    
     //   mTickerStopped = false;
       // super.onAttachedToWindow();
       // mHandler = new Handler();

        /**
         * requests a tick on the next hard-second boundary
         */
       // mTicker = new Runnable() {
       //         public void run() {
        //            if (mTickerStopped) return;
        //            mCalendar.setTimeInMillis(System.currentTimeMillis());
         //           setText(DateFormat.format(mFormat, mCalendar));
         //           invalidate();
         //           long now = SystemClock.uptimeMillis();
         //           long next = now + (1000 - now % 1000);
         //           mHandler.postAtTime(mTicker, next);
         //       }
        //    };
     //   mTicker.run();
   // }




/**
 * onDetachedFromWindow
 */
    @Override
    protected void onDetachedFromWindow() {
        super.onDetachedFromWindow();
              mClockTimer.stop(); 
        // mTickerStopped = true;
    } // onDetachedFromWindow




    /**
     * procSystemSettingsChange
     */
private void procSystemSettingsChange() {
    mDigitalClockText.setSystemToFormat();
} // procSystemSettingsChange



    /**
     * updateText
     */
private void updateText() {
   setText( mDigitalClockText.getFormatTime() ); 
} // pdateView



    /**
     * Pulls 12/24 mode from system settings
     */
    //private boolean get24HourMode() {
       // return ////android.text.format.DateFormat.is24HourFormat(getContext(// ));
    //}


//    private void setFormat() {
//        if (get24HourMode()) {
//            mFormat = m24;
//        } else {
//            mFormat = m12;
//        }
//    }
    



    //private class FormatChangeObserver extends // ContentObserver {
//        public FormatChangeObserver() {
   //         super(new Handler());
      //  }

        // @Override
       // public void onChange(boolean selfChange) {
        //    setFormat();
        // }
    // }
    
} // class DigitalClock
